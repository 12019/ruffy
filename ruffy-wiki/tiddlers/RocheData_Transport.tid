created: 20170429181318794
modified: 20170429181609707
tags: 
title: RocheData/Transport
type: text/vnd.tiddlywiki

"""
Some interesting constants

// TX/RX  packet buffer sizes
	private static final short NUM_DELIMITERS                = 2;           	// two delimter bytes one at the start of packet, and one at the end
	private static final byte MIN_PACKET_SIZE               = 28;      			// PACKET_HEADER_SIZE + AUTHEN_SIZE + NUM_DELIMITERS

	// Packets field sizes
	private static final byte DM_CLIENT_ID_SIZE       = 4;    			// # bytes in DM client ID
	private static final byte DM_DEVICE_ID_SIZE       = 13;   			// # bytes in DM device ID
	private static final byte ID_REQ_PAYLOAD_SIZE     = (byte) (DM_DEVICE_ID_SIZE +  DM_CLIENT_ID_SIZE);   		// # bytes in ID request payload
	private static final byte CRC_SIZE                = 2;       	// # bytes in CRC
	private static final byte VERSION                 = 0x10;    	// frame version:  major- bits 7 -4, minor bits 3 -0

	// Pump commands/responses
	public static final byte A_CON_REQ               	= 0x09;
	public static final byte A_KEY_REQ               	= 0x0C;
	public static final byte A_ID_REQ                	= 0x12;
	public static final byte A_KEY_AVA               	= 0x0F;
	public static final byte SYN                     	= 0x17;
	public static final byte CONNECT_ACCEPTED         	= 0x0A;
	public static final byte KEY_RESPONSE             	= 0x11;
	public static final byte ID_RESPONSE              	= 0x14;
	public static final byte SYN_ACK                  	= 0x18;
	public static final byte DISCONNECT               	= 0x1B;
	public static final byte ACK_RESPONSE             	= 0x05;
	public static final byte UNRELIABLE_DATA          	= 0x03;
	public static final byte RELIABLE_DATA            	= 0x23;
	public static final byte ERROR_RESPONSE           	= 0x06;

	// Failure incrementing nonce
	private static final byte NONCE_INC_FAILED  = (byte) 0xFF;

more constamts:
private byte[] connect_pair_authenticate =
	{    
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   A_CON_REQ                                ,       CRC_SIZE,0,                     (byte) 0xF0
	};
	private byte[] key_request =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   A_KEY_REQ                                ,       CRC_SIZE,0,                     (byte) 0xF0
	};
	private byte[] key_available =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   A_KEY_AVA                                ,       CRC_SIZE,0,                     (byte) 0xF0
	};
	private byte[] device_id =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   A_ID_REQ                                 ,       ID_REQ_PAYLOAD_SIZE,0,           0
	};
	private byte[] disconnect =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits MSB LSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   DISCONNECT                               ,       0,0,                             0
	};
	private byte[] connect_normal =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   SYN                                      ,       0,0,                             0
	};
	private byte[] ack =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   ACK_RESPONSE                             ,       0,0,                             0
	};
	private byte[] data_packet =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   UNRELIABLE_DATA                          ,       0,0,                             0
	};
	private byte[] error_message =
	{
	// VERSION: 8 bits \ Seq#: 1 bit Res1: 1 bit(unused) REL: 1 bit  Command: 5 bits\ length: 16 bits LSB MSB\Source addr: 4 bits Dest addr: 4 bits\ Nonce: 104 bits\ Payload: \ Authentication Code
	        VERSION    ,                   ERROR_RESPONSE                           ,       1,0,                             0
	};
	
	public static final int SEND_CONNECT_PAIR_AUTHENTICATE = 0;
	public static final int SEND_KEY_REQUEST = 1;
	public static final int SEND_KEY_AVAILABLE = 2;
	public static final int SEND_ID_REQUEST = 3;
	public static final int SEND_SYN = 4;
	public static final int SEND_RELIABLE_DATA = 5;
	public static final int SEND_ACK = 6;
	public static final int SEND_UNRELIABLE_DATA = 7;

and some stuff:
public Security s = new Security();
	public Packet p = new Packet();
	public Key k = new Key();
	
	private Driver drv;
	private Handler handler;