created: 20170429190256096
modified: 20170429191943347
tags: 
title: RocheData/Transport:parseRx
type: text/vnd.tiddlywiki

"""
Params:
List&lt;Byte&gt; packet, 
boolean rel

Code:
Byte command = (byte) (packet.get(1) &amp; 0x1F);
		boolean expected = false;
		String descrip = "";
		
		[[RocheData/RochePacket]] p = drv.t.[[RocheData/Transport:parsePacket]](packet);
		
		byte seq = 0x00;
		if((packet.get(1) &amp; 0x80)==0x80)
			seq = (byte) 0x80;
		else
			seq = (byte) 0x00;
		
		switch(command)
		{
			case Transport.CONNECT_ACCEPTED:	/****************************************************************************************/
				
				descrip = "CONNECT_ACCEPTED";
				
				[[RocheData/Transport:sendTransportLayerCommand]](Transport.SEND_KEY_REQUEST, null, "");
				
				//POST ALERT FOR ENTERING 10-DIGIT KEY
				
				//Turn off timeout timer for connection start
				if(Driver.timeoutTimer != null)
					Debug.i(TAG, FUNC_TAG, "Timeout timer: "+Driver.timeoutTimer.cancel(true));
				
				handler.post(new Runnable()														
				{
					public void run()
					{
						AlertDialog.Builder alert = new AlertDialog.Builder(drv.ui);
						final EditText input = new EditText(drv.ui);
				    	input.setInputType(InputType.TYPE_CLASS_NUMBER);
				    	
				    	alert.setTitle("Passkey Entry");
						alert.setMessage("Please enter 10-digit key from the pump screen:");
						alert.setCancelable(false);
						alert.setView(input);
						
						alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int whichButton) {
							
							}
						});
						final AlertDialog dialog = alert.create();
						dialog.show();
						
						dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener()
						{            
					          
					          public void onClick(View v) {
						        	String key = input.getText().toString();
									
									if((!TextUtils.isEmpty(key))&amp;&amp;(key.length() == 10))
									{
										Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; "+key);
										
										drv.k_10 = k.[[RocheData/Key:generateKey]](key); [[RocheDriver/Driver]]
										
										String d = "";
										for(byte b:drv.k_10)
											d += String.format("%02X ", b);
										Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; K_10: "+d);
										
										if(getState() == Transport.P1_AWAIT_CONNECT_RESP)
										{
											[[RocheData/Transport:setState]](Transport.P1_KEY_AVA);
											[[RocheData/Transport:runFSM]]();
										}
										dialog.dismiss();
									}
						            else
						            {
						            	Toast.makeText(input.getContext(), "The key must be 10-digit long.", Toast.LENGTH_SHORT).show();
									}
							  }
					      });
					}
				});
				
				break;
			case Transport.KEY_RESPONSE:		/****************************************************************************************/
				
				descrip = "KEY_RESPONSE";
				
				if(p != null)
				{
					Object weak_session = null;
					
					try 
					{
						//CREATE THE WEAK KEY OBJECT WITH THE 10 DIGIT WEAK KEY	
						weak_session = Twofish_Algorithm.makeKey(drv.k_10);
					} 
					catch (InvalidKeyException e) 
					{
						e.printStackTrace();
					}
						
					if(drv.t.s.ccmVerify(p, weak_session, p.umac) &amp;&amp; weak_session != null)
					{
						//DECRYPT THE 128-BIT KEYS WITH THE WEAK KEY
						
						drv.addresses = (byte)((p.addresses &amp;lt;&amp;lt; 4) &amp; 0xF0);		//Get the address and reverse it since source and destination are reversed from the RX packet
						
						byte[] key_pd = new byte[16];							//Get the bytes for the keys
						byte[] key_dp = new byte[16];
						
						p.pBuf.rewind();
						p.pBuf.get(key_pd, 0, key_pd.length);
						p.pBuf.get(key_dp, 0, key_dp.length);
						
						String d = "";
						for(byte b:key_pd)
							d += String.format("%02X ", b);
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; Key_PD: "+d);
						
						d = "";
						for(byte b:key_dp)
							d += String.format("%02X ", b);
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; Key_DP: "+d);
						
						byte[] key_pd_de = Twofish_Algorithm.blockDecrypt(key_pd, 0, weak_session);
						byte[] key_dp_de = Twofish_Algorithm.blockDecrypt(key_dp, 0, weak_session);
						
						[[RocheData/Transport:saveKeysToPrefs]](key_pd_de, key_dp_de);
						
						d = "";
						for(byte b:key_pd_de)
							d += String.format("%02X ", b);
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; Decrytped PD: "+d);
						
						d = "";
						for(byte b:key_dp_de)
							d += String.format("%02X ", b);
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; Decrytped DP: "+d);
						
						//CREATE THE KEY OBJECTS (WHITENING SUBKEYS, ROUND KEYS, S-BOXES)
						try 
						{
							drv.pd_key = Twofish_Algorithm.makeKey(key_pd_de);
							drv.dp_key = Twofish_Algorithm.makeKey(key_dp_de);
						} 
						catch (InvalidKeyException e) 
						{
							e.printStackTrace();
						}
						
						if(getState() == Transport.P1_AWAIT_KEY_RESP)
						{
							[[RocheData/Transport:setState]](Transport.P2_ID_REQ);
						}
					}
					else
					{
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; KEY_RESPONSE Verification Failed!");	
						
						handler.post(new Runnable(){
							public void run() {
								[[RocheData/Transport:setState]](Transport.P1_AWAIT_CONNECT_RESP);
								
								//drv.resetDriver();
								AlertDialog.Builder alert = new AlertDialog.Builder(drv.ui);
								final EditText input = new EditText(drv.ui);
						    	input.setInputType(InputType.TYPE_CLASS_NUMBER);
						    	
						    	alert.setTitle("Passkey Entry");
								alert.setMessage("Please enter 10-digit key from the pump screen:");
								alert.setCancelable(false);
								alert.setView(input);
								
								alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
									public void onClick(DialogInterface dialog, int whichButton) {
									
									}
								});
								final AlertDialog dialog = alert.create();
								dialog.show();
								
								dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener()
								{            
							          
							          public void onClick(View v) {
								        	String key = input.getText().toString();
											
											if((!TextUtils.isEmpty(key))&amp;&amp;(key.length() == 10))
											{
												Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; "+key);
												
												drv.k_10 = k.[[RocheData/Key:generateKey]](key);
												
												String d = "";
												for(byte b:drv.k_10)
													d += String.format("%02X ", b);
												Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; K_10: "+d);
												
												if([[RocheData/Transport:getState]]() == Transport.P1_AWAIT_CONNECT_RESP)
												{
													[[RocheData/Transport:setState]](Transport.P1_KEY_AVA);
													[[RocheData/Transport:runFSM]]();
												}
												dialog.dismiss();
											}
								            else
								            {
								            	Toast.makeText(input.getContext(), "The key must be 10-digit long.", Toast.LENGTH_SHORT).show();
											}
									  }
							      });
							}
						});
						return;
					}
				}
				break;
			case Transport.ID_RESPONSE:			/****************************************************************************************/
				
				descrip = "ID_RESPONSE";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
						byte[] device = new byte[13];
						
						p.pBuf.order(ByteOrder.LITTLE_ENDIAN);
						drv.serverId = p.pBuf.getInt();
						p.pBuf.get(device);
						drv.deviceId = new String(device);
						
						Debug.i(TAG, FUNC_TAG, "Server ID: "+String.format("%X", drv.serverId)+" Device ID: "+drv.deviceId);
						
						if([[RocheData/Transport:getState]]() == Transport.P2_AWAIT_ID_RESP)
							[[RocheData/Transport:setState]](Transport.P3_SYN);
					}
					else
					{
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; ID_RESPONSE Verification Failed!");
					}
				}
				break;
				
			case Transport.SYN_ACK:				/****************************************************************************************/
				
				descrip = "SYN_ACK";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
						if([[RocheData/Transport:getState]]() == Transport.P3_SYN_ACK)
						{
							drv.seqNo = 0x00;
							
							Debug.i(TAG, FUNC_TAG, "Sequence Number reset!");
							Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; Sending APP_SEND_CONNECT!");
							
							if(Driver.[[RocheDriver/Driver:getMode]]() == Driver.PAIRING_AUTH)
								[[RocheData/Transport:setState]](Transport.P3_APP_CONNECT);
						}
						else if([[RocheData/Transport:getState]]() == Transport.P3_SYN_DIS_RESP)
						{
							Debug.i(TAG, FUNC_TAG, "Resetting TX layer of pump after binding...");
							[[RocheData/Transport:setState]](Transport.P3_APP_DISCONNECT);
						}
						else if([[RocheData/Transport:getState]]() == Transport.CM_SYN_RESP)
						{
							[[RocheData/Transport:setState]](Transport.CM_SYN_ACKD);
						}
					}
					else
					{
						Debug.i(TAG, FUNC_TAG, "parseRx &amp;gt;&amp;gt;&amp;gt; SYN_ACK Verification Failed!");
					}
				}
				break;
				
			case Transport.DISCONNECT:			/****************************************************************************************/
				
				descrip = "DISCONNECT";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
					}
				}
				
				break;
				
			case Transport.ACK_RESPONSE:		/****************************************************************************************/
				
				descrip = "ACK_RESPONSE";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
					}
				}
				
				break;
				
			case Transport.RELIABLE_DATA:		/****************************************************************************************/
			case Transport.UNRELIABLE_DATA:		/****************************************************************************************/
				
				if(rel)
				{
					//if(seq != expectedSeq)
					//	expected = false;
					
					descrip = "RELIABLE_DATA";
				}
				else
					descrip = "UNRELIABLE_DATA";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
						Application.appMessages.offer(drv.new [[RocheData/Transport/InPacket:InPacket]](p.payload, rel)); [[RocheData/Application]]
					}
				}
				
				break;
				
			case Transport.ERROR_RESPONSE:		/****************************************************************************************/
				
				descrip = "ERROR_RESPONSE";
				
				if(p != null)
				{
					if(drv.t.s.[[RocheData/Security:ccmVerify]](p, drv.pd_key, p.umac))
					{
						byte error = 0;
						String err = "";
						
						if(p.payload.length &amp;gt; 0)
							error = p.payload[0]; 
						
						switch(error)
						{
							case 0x00:
								err = "Undefined";
								break;
							case 0x0F:
								err = "Wrong state";
								drv.a.[[RocheData/Application:startMode]](Driver.COMMAND, true);
								Debug.e(TAG, FUNC_TAG, "Forcing starting of command mode, since the transport layer broke!");
								break;
							case 0x33:
								err = "Invalid service primitive";
								break;
							case 0x3C:
								err = "Invalid payload length";
								break;
							case 0x55:
								err = "Invalid source address";
								break;
							case 0x66:
								err = "Invalid destination address";
								break;
						}
						
						Debug.e(TAG, FUNC_TAG, "Error in Transport Layer! ("+err+")");
						Driver.log("ROCHE", FUNC_TAG, "Error in Transport Layer! ("+err+")");
					}
				}
				
				break;
				
			default:							/****************************************************************************************/
				
				descrip = "UNKNOWN TRANSPORT PACKET!  ID: "+String.format("%X", command);
				
				break;
		}
		
		Debug.i(TAG, FUNC_TAG, "Receiving: "+descrip+" | Seq No: "+String.format("%X", seq) +" | Length: "+ packet.size() + ((expected) ? " | IGNORED" : ""));
		
		[[RocheData/Transport:runFSM]]();